{"ast":null,"code":"var _jsxFileName = \"D:\\\\prem\\\\experiment\\\\Drone Mission Planner\\\\frontend\\\\src\\\\components\\\\MapDisplay.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { GoogleMap, LoadScript, Marker, Polyline } from \"@react-google-maps/api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MapDisplay = ({\n  missions\n}) => {\n  _s();\n  const mapContainerStyle = {\n    width: \"100%\",\n    height: \"400px\"\n  };\n  const center = {\n    lat: 28.6139,\n    lng: 77.2090\n  }; // Default center (Delhi, India)\n  const [visibleMissions, setVisibleMissions] = useState(missions);\n  useEffect(() => {\n    setVisibleMissions(missions); // Keep mission list updated\n\n    // Remove completed routes after 5 seconds\n    const timeoutIds = [];\n    missions.forEach(mission => {\n      if (mission.status === \"Completed\") {\n        const timeoutId = setTimeout(() => {\n          setVisibleMissions(prev => prev.filter(m => m._id !== mission._id));\n        }, 5000);\n        timeoutIds.push(timeoutId);\n      }\n    });\n\n    // Cleanup timeouts\n    return () => {\n      timeoutIds.forEach(clearTimeout);\n    };\n  }, [missions]);\n  return /*#__PURE__*/_jsxDEV(LoadScript, {\n    googleMapsApiKey: \"YOUR_GOOGLE_MAPS_API_KEY\",\n    children: [\" /* */\", /*#__PURE__*/_jsxDEV(GoogleMap, {\n      mapContainerStyle: mapContainerStyle,\n      center: center,\n      zoom: 10,\n      children: visibleMissions.map(mission => {\n        // Set polyline color based on mission status\n        let lineColor = \"#FF0000\"; // Default red\n        if (mission.status === \"In Progress\") lineColor = \"#0000FF\"; // Blue\n        if (mission.status === \"Completed\") lineColor = \"#008000\"; // Green\n        if (mission.status === \"Cancelled\") return null; // Remove cancelled missions immediately\n\n        return /*#__PURE__*/_jsxDEV(React.Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(Marker, {\n            position: {\n              lat: mission.startLat,\n              lng: mission.startLng\n            },\n            label: \"Start\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Marker, {\n            position: {\n              lat: mission.destLat,\n              lng: mission.destLng\n            },\n            label: \"End\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Polyline, {\n            path: [{\n              lat: mission.startLat,\n              lng: mission.startLng\n            }, ...(mission.waypoints || []).map(wp => ({\n              lat: wp.lat,\n              lng: wp.lng\n            })), {\n              lat: mission.destLat,\n              lng: mission.destLng\n            }],\n            options: {\n              strokeColor: lineColor,\n              strokeOpacity: 0.8,\n              strokeWeight: 4\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 29\n          }, this)]\n        }, mission._id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 25\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 9\n  }, this);\n};\n_s(MapDisplay, \"W4n2eN8NfPcaWpUFx43IYnZlgac=\");\n_c = MapDisplay;\nexport default MapDisplay;\nvar _c;\n$RefreshReg$(_c, \"MapDisplay\");","map":{"version":3,"names":["React","useEffect","useState","GoogleMap","LoadScript","Marker","Polyline","jsxDEV","_jsxDEV","MapDisplay","missions","_s","mapContainerStyle","width","height","center","lat","lng","visibleMissions","setVisibleMissions","timeoutIds","forEach","mission","status","timeoutId","setTimeout","prev","filter","m","_id","push","clearTimeout","googleMapsApiKey","children","zoom","map","lineColor","Fragment","position","startLat","startLng","label","fileName","_jsxFileName","lineNumber","columnNumber","destLat","destLng","path","waypoints","wp","options","strokeColor","strokeOpacity","strokeWeight","_c","$RefreshReg$"],"sources":["D:/prem/experiment/Drone Mission Planner/frontend/src/components/MapDisplay.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { GoogleMap, LoadScript, Marker, Polyline } from \"@react-google-maps/api\";\r\n\r\nconst MapDisplay = ({ missions }) => {\r\n    const mapContainerStyle = { width: \"100%\", height: \"400px\" };\r\n    const center = { lat: 28.6139, lng: 77.2090 }; // Default center (Delhi, India)\r\n    const [visibleMissions, setVisibleMissions] = useState(missions);\r\n\r\n    useEffect(() => {\r\n        setVisibleMissions(missions); // Keep mission list updated\r\n\r\n        // Remove completed routes after 5 seconds\r\n        const timeoutIds = [];\r\n        missions.forEach((mission) => {\r\n            if (mission.status === \"Completed\") {\r\n                const timeoutId = setTimeout(() => {\r\n                    setVisibleMissions((prev) => prev.filter((m) => m._id !== mission._id));\r\n                }, 5000);\r\n                timeoutIds.push(timeoutId);\r\n            }\r\n        });\r\n\r\n        // Cleanup timeouts\r\n        return () => {\r\n            timeoutIds.forEach(clearTimeout);\r\n        };\r\n    }, [missions]);\r\n\r\n    return (\r\n        <LoadScript googleMapsApiKey=\"YOUR_GOOGLE_MAPS_API_KEY\"> /* */\r\n            <GoogleMap mapContainerStyle={mapContainerStyle} center={center} zoom={10}>\r\n                {visibleMissions.map((mission) => {\r\n                    // Set polyline color based on mission status\r\n                    let lineColor = \"#FF0000\"; // Default red\r\n                    if (mission.status === \"In Progress\") lineColor = \"#0000FF\"; // Blue\r\n                    if (mission.status === \"Completed\") lineColor = \"#008000\"; // Green\r\n                    if (mission.status === \"Cancelled\") return null; // Remove cancelled missions immediately\r\n\r\n                    return (\r\n                        <React.Fragment key={mission._id}>\r\n                            <Marker position={{ lat: mission.startLat, lng: mission.startLng }} label=\"Start\" />\r\n                            <Marker position={{ lat: mission.destLat, lng: mission.destLng }} label=\"End\" />\r\n\r\n                            <Polyline\r\n                                path={[\r\n                                    { lat: mission.startLat, lng: mission.startLng },\r\n                                    ...(mission.waypoints || []).map((wp) => ({\r\n                                        lat: wp.lat,\r\n                                        lng: wp.lng,\r\n                                    })),\r\n                                    { lat: mission.destLat, lng: mission.destLng }\r\n                                ]}\r\n                                options={{ strokeColor: lineColor, strokeOpacity: 0.8, strokeWeight: 4 }}\r\n                            />\r\n                        </React.Fragment>\r\n                    );\r\n                })}\r\n            </GoogleMap>\r\n        </LoadScript>\r\n    );\r\n};\r\n\r\nexport default MapDisplay;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}